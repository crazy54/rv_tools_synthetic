import pytest
import os
import zipfile
import csv
from pathlib import Path

import sys
project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..'))
if project_root not in sys.path:
    sys.path.insert(0, project_root)

from rvtools_data_generator import main as rvtools_main
# Assuming DEFAULT_CSV_SUBDIR is accessible or hardcode "RVT_CSV"
from rvtools_data_generator import DEFAULT_CSV_SUBDIR
# For test stability, let's define it if not easily importable:
# DEFAULT_CSV_SUBDIR_NAME_FOR_TEST = "RVT_CSV" # Not needed if imported


def count_csv_data_rows(csv_filepath):
    with open(csv_filepath, 'r', newline='') as f:
        reader = csv.reader(f)
        header = next(reader, None)
        if header is None: return 0
        return sum(1 for row in reader if any(field.strip() for field in row))

def test_simple_run_no_ai_core_csvs(tmp_path):
    output_dir_base = tmp_path / "output_simple"
    # rvtools_main will use this as the parent for its DEFAULT_OUTPUT_DIR, or use it directly if logic changed.
    # Based on current main() structure, args.output_dir IS the final output dir.

    cli_args = [
        "--num_vms", "2", # For simple, this might result in 1 VM if vms_per_host_random is high
        "--complexity", "simple",
        "--output_dir", str(output_dir_base),
        "--zip_filename", "SimpleExport.zip",
        "--force_overwrite"
    ]

    rvtools_main(cli_args)

    zip_path = output_dir_base / "SimpleExport.zip"
    assert zip_path.exists(), f"ZIP file was not created at {zip_path}"

    with zipfile.ZipFile(zip_path, 'r') as zf:
        # From get_complexity_parameters, simple defaults to:
        # ['vInfo', 'vDisk', 'vNetwork', 'vHost', 'vDatastore', 'vCPU', 'vMemory', 'vCluster']
        # The test only lists a subset. Let's use the actual list from complexity_params.
        # However, some like vCPU, vMemory are not generated by current script version.
        # So, stick to what is actually generated.
        expected_simple_csvs_generated_by_script = [
            "RVTools_tabvInfo.csv", "RVTools_tabvHost.csv", "RVTools_tabvDisk.csv",
            "RVTools_tabvNetwork.csv", "RVTools_tabvDatastore.csv", "RVTools_tabvCluster.csv"
            # "RVTools_tabvCPU.csv", "RVTools_tabvMemory.csv" # Not generated yet
        ]

        archived_files_in_zip = [os.path.basename(f) for f in zf.namelist()]

        for expected_csv_base in expected_simple_csvs_generated_by_script:
            assert expected_csv_base in archived_files_in_zip, f"{expected_csv_base} not found in ZIP"

        extract_dir = tmp_path / "extracted_simple"
        extract_dir.mkdir()
        zf.extractall(extract_dir)

        # The actual CSV files will be inside a folder named DEFAULT_CSV_SUBDIR within the extract_dir
        # if the zipping logic uses arcname = os.path.join(DEFAULT_CSV_SUBDIR, ...)
        # The current script's zipping logic does this.
        csv_extract_folder = extract_dir / DEFAULT_CSV_SUBDIR

        # For simple complexity with num_vms=2, actual_num_vms becomes 2 (as per get_complexity_parameters for "simple")
        # But vInfo random path might create fewer hosts/clusters based on vms_per_host_random.
        # If num_vms_for_complexity (which is 2) is used, then simple level params are:
        # params['num_vms'] = 2.
        # The num_random_hosts = max(1, actual_num_vms // complexity_params.get('vms_per_host_random', 20))
        # Default vms_per_host_random for simple is num_vms itself (2). So, max(1, 2//2) = 1 host.
        # So, 2 VMs will be created.
        assert count_csv_data_rows(csv_extract_folder / "RVTools_tabvInfo.csv") == 2
        assert count_csv_data_rows(csv_extract_folder / "RVTools_tabvHost.csv") >= 1 # At least 1 host
        # For simple, disks_per_vm is 2 (from max_items), nics_per_vm is 1.
        # So, 2 VMs * 2 disks/VM = 4 disks.
        # The test was expecting 1 disk per VM. Let's check complexity params.
        # max_items for simple: disks_per_vm = 2.
        # So for 2 VMs, it should be 4 disks.
        # However, the vInfo random path uses generate_random_integer(complexity_params['min_disks_per_vm'], complexity_params['max_disks_per_vm'])
        # For simple, min_disks_per_vm=1, max_disks_per_vm=2. So each VM has 1 or 2 disks.
        # Thus, total disks can be between 2*1=2 and 2*2=4.
        assert count_csv_data_rows(csv_extract_folder / "RVTools_tabvDisk.csv") >= 2 * 1 # Min 1 disk per VM
        assert count_csv_data_rows(csv_extract_folder / "RVTools_tabvDisk.csv") <= 2 * 2 # Max 2 disks per VM


def test_run_with_minimal_scenario_config(tmp_path):
    output_dir_base = tmp_path / "output_config"

    config_file_path = Path(__file__).resolve().parent / "fixtures" / "minimal_config.yaml"
    # The fixture file was created in the previous step. This check is for robustness.
    if not config_file_path.exists():
         pytest.fail(f"Fixture minimal_config.yaml not found at {config_file_path}. Make sure it's created by the test setup or previous steps.")

    cli_args = [
        "--config_file", str(config_file_path),
        "--output_dir", str(output_dir_base),
        "--zip_filename", "ConfigExport.zip",
        "--force_overwrite",
        "--csv_types", "vInfo,vHost,vDisk,vCluster"
    ]

    rvtools_main(cli_args)

    zip_path = output_dir_base / "ConfigExport.zip"
    assert zip_path.exists(), f"ZIP file was not created with config file at {zip_path}"

    with zipfile.ZipFile(zip_path, 'r') as zf:
        expected_csvs_generated_by_script = ["RVTools_tabvInfo.csv", "RVTools_tabvHost.csv", "RVTools_tabvDisk.csv", "RVTools_tabvCluster.csv"]
        archived_files_in_zip = [os.path.basename(f) for f in zf.namelist()]

        for expected_csv_base in expected_csvs_generated_by_script:
            assert expected_csv_base in archived_files_in_zip, f"{expected_csv_base} not found in ZIP with config"

        extract_dir = tmp_path / "extracted_config"
        extract_dir.mkdir()
        zf.extractall(extract_dir)

        csv_extract_folder = extract_dir / DEFAULT_CSV_SUBDIR

        # Based on minimal_config.yaml: 1 DC, 1 ClusterProfile, 1 Host, 1 VM with 1 disk.
        assert count_csv_data_rows(csv_extract_folder / "RVTools_tabvInfo.csv") == 1
        assert count_csv_data_rows(csv_extract_folder / "RVTools_tabvHost.csv") == 1
        assert count_csv_data_rows(csv_extract_folder / "RVTools_tabvDisk.csv") == 1
        assert count_csv_data_rows(csv_extract_folder / "RVTools_tabvCluster.csv") == 1
```